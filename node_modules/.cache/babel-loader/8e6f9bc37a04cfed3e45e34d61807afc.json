{"ast":null,"code":"// import { createContext, useEffect, useState } from \"react\";\n// import { v4 as uuidv4 } from \"uuid\";\n// const FeedbackContext = createContext();\n// export const FeedbackProvider = ({ children }) => {\n//   const [feedback, setFeedback] = useState([])\n//   const [isLoading, setIsLoading] = useState(true)\n//   const [feedbackEdit, setFeedbackEdit] = useState({\n//     item: {},\n//     edit: false,\n//   }, []);\n//   useEffect(() => {\n//     fetchFeedback()\n//   })\n//   const fetchFeedback = async () => {\n//     const response = await fetch(`/feedback`)\n//     const data = await response.json()\n//     setFeedback(data)\n//     setIsLoading(false)\n//   }\n//   const addFeedback = async (newFeedback) => {\n//     const response = await fetch('/feedback', {\n//         method: 'POST',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(newFeedback)\n//     })\n//     const data = await response.json()\n//     setFeedback([data, ...feedback])\n//   }\n//   const deleteFeedback = async (id) => {\n//     if (window.confirm(\"Are you sure want to delete ?\")) {\n//         await fetch(`/feedback/${id}`, {method: 'DELETE'})\n//         setFeedback(feedback.filter((item) => item.id !== id));\n//     }\n//   };\n//   const editFeedback = (item) => {\n//     setFeedbackEdit({\n//       item,\n//       edit: true,\n//     });\n//   };\n//   const updateFeedback = async (id, updateItem) => {\n//     const response = await fetch(`/feedback/${id}`, {\n//         method: 'PUT',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(updateItem)\n//     })\n//     const data = response.json()\n//     setFeedback(feedback.map((item) => {\n//         return item.id === id ? { ...item, ...data } : item\n//     }))\n//   }\n//   return (\n//     <FeedbackContext.Provider\n//       value={{\n//         feedback: feedback,\n//         deleteFeedback: deleteFeedback,\n//         addFeedback: addFeedback,\n//         editFeedback: editFeedback,\n//         feedbackEdit: feedbackEdit,\n//         updateFeedback: updateFeedback,\n//         isLoading\n//       }}\n//     >\n//       {children}\n//     </FeedbackContext.Provider>\n//   );\n// };\n// export default FeedbackContext;","map":{"version":3,"sources":["D:/feedback-app/src/context/FeedbackContext.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import { createContext, useEffect, useState } from \"react\";\r\n// import { v4 as uuidv4 } from \"uuid\";\r\n\r\n// const FeedbackContext = createContext();\r\n\r\n// export const FeedbackProvider = ({ children }) => {\r\n//   const [feedback, setFeedback] = useState([])\r\n//   const [isLoading, setIsLoading] = useState(true)\r\n\r\n//   const [feedbackEdit, setFeedbackEdit] = useState({\r\n//     item: {},\r\n//     edit: false,\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     fetchFeedback()\r\n//   })\r\n\r\n//   const fetchFeedback = async () => {\r\n//     const response = await fetch(`/feedback`)\r\n//     const data = await response.json()\r\n//     setFeedback(data)\r\n//     setIsLoading(false)\r\n//   }\r\n\r\n//   const addFeedback = async (newFeedback) => {\r\n//     const response = await fetch('/feedback', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(newFeedback)\r\n//     })\r\n\r\n//     const data = await response.json()\r\n\r\n//     setFeedback([data, ...feedback])\r\n//   }\r\n\r\n//   const deleteFeedback = async (id) => {\r\n//     if (window.confirm(\"Are you sure want to delete ?\")) {\r\n//         await fetch(`/feedback/${id}`, {method: 'DELETE'})\r\n//         setFeedback(feedback.filter((item) => item.id !== id));\r\n//     }\r\n//   };\r\n\r\n//   const editFeedback = (item) => {\r\n//     setFeedbackEdit({\r\n//       item,\r\n//       edit: true,\r\n//     });\r\n//   };\r\n\r\n//   const updateFeedback = async (id, updateItem) => {\r\n//     const response = await fetch(`/feedback/${id}`, {\r\n//         method: 'PUT',\r\n//         headers: {\r\n//             'Content-Type': 'application/json'\r\n//         },\r\n//         body: JSON.stringify(updateItem)\r\n//     })\r\n\r\n//     const data = response.json()\r\n//     setFeedback(feedback.map((item) => {\r\n//         return item.id === id ? { ...item, ...data } : item\r\n//     }))\r\n//   }\r\n\r\n//   return (\r\n//     <FeedbackContext.Provider\r\n//       value={{\r\n//         feedback: feedback,\r\n//         deleteFeedback: deleteFeedback,\r\n//         addFeedback: addFeedback,\r\n//         editFeedback: editFeedback,\r\n//         feedbackEdit: feedbackEdit,\r\n//         updateFeedback: updateFeedback,\r\n//         isLoading\r\n//       }}\r\n//     >\r\n//       {children}\r\n//     </FeedbackContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default FeedbackContext;\r\n"]},"metadata":{},"sourceType":"module"}